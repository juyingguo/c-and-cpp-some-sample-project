/*******************************版权信息*************************************
 * 文件名称 : AppConfig.h
 * 文件版本 : 1.0
 * 开发人员 : Yao
 * 更新日期 : 2010.03.04
 * 更新原因 : 重新定义文件大小的数据类型为64位
 * 文件说明 : 定义了应用程序的基本配置信息
 ****************************************************************************/

#pragma once

#include "winsock2.h"
#pragma comment(lib,"wsock32.lib")


/**************************配置文件的相关定义*******************************/

/**************************配置文件允许的最大项目***************************/
#define MAX_CONFIG_ITEM												64
/**************************配置文件路径*************************************/
#define CONFIG_PATH													_T("\\config.ini")
/**************************缓冲区最大长度***********************************/
#define MAX_BUF_LEN													1024
/**************************文件路径最大长度*********************************/
#define MAX_FILE_PATH_LEN											256
/**************************过滤字符串定义***********************************/
#define FILTER														_T("=")
/**************************配置项长度定义***********************************/
#define CONFIGITEMNUM												_T("配置项数目")
/**************************配置项长度索引***********************************/
#define INDEX_CONFIG_ITEM_NUM										0
/**************************无效值定义***************************************/
#define INVALID_VALUE												-1

/***************************************************************************/
/******************************配置文件索引定义*****************************/
/***************************************************************************/
#define INDEX_SERVER_PORT											1	//server & client
#define INDEX_MAX_CONNECT											2	//server
#define INDEX_SERVER_ADDRESS										2	//client

/*************************数字基数定义 默认为十进制*************************/
#define RADIX														10
/*************************时间单位定义**************************************/
#define TIME_UNIT													60
#define SECOND														1
#define MINUTE														(UNIT*SECOND)
#define HOUR														(UNIT*MINUTE)
/**************************文件块长度定义***********************************/
#define KB															1024
#define MB															(KB*KB)
const double GB = (double)(KB) * (double)(MB);
const double TB = (double)(KB) * (double)(GB);
#define BLOCK_SIZE													(256*KB)	//256KB
/**************************读文件出错***************************************/
#define READ_ERROR													-1
/**************************写文件出错***************************************/
#define WRITE_ERROR													-2

/**************************端口范围定义*************************************/
#define MIN_PORT													1024
#define MAX_PORT													65535

/**************************连接数范围定义***********************************/
#define MIN_CONNECT													1
#define MAX_CONNECT													32


/***************************************************************************/
/*******************************通信模型相关定义****************************/
/***************************************************************************/
/******************************最大的延时信息*******************************/
#define MAX_ELAPSE													10
/***********************************状态数量定义****************************/
#define STATE_NUM													3
/*********************************状态定义**********************************/
typedef enum
{
	INIT						= 0,								//初始态
	CONNECTED					= 1,								//已连接
	TRANSFERRING				= 2,								//传输中
}State;

/********************************消息范围定义*******************************/
#define START_INDEX_MSG												(WM_USER + 1)
#define END_INDEX_MSG												(WM_USER + 9)

/**********************通信消息结构定义*************************************/
typedef enum
{
	/********************server端发送的消息类型定义*************************/
	SEND_FILE_INFO_REQ			= (WM_USER + 1),					//发送文件信息请求
	SEND_FILE_REQ				= (WM_USER + 2),					//发送文件请求
	/********************client端发送的消息类型定义*************************/
	RECV_FILE_INFO_ACK			= (WM_USER + 3),					//接收文件信息成功
	RECV_FILE_ACK				= (WM_USER + 4),					//接收文件块成功
	/********************公用消息定义***************************************/
	INTERRUPT_TRANSFER			= (WM_USER + 5),					//中断传输
	CLOSE_CONNECT				= (WM_USER + 6),					//关闭连接
	/********************模型向视图通信消息定义*****************************/
	CONNECT_SUCCESS				= (WM_USER + 7),					//连接成功
	TRANSFERRING_FILE			= (WM_USER + 8),					//传输文件
	TRANSFER_OVER				= (WM_USER + 9),					//传输正常结束
}MessageType;

/***********************自定义的数据大小类型********************************/
typedef __int64 Size;

/************************文件信息结构定义***********************************/
typedef struct  
{
	char _name[MAX_FILE_PATH_LEN];									//文件名
	//long _fileSize;												//文件大小
	//DWORD _size;
	Size _fileSize;													//文件大小
}FileInfo;

/**************************传输所用的数据结构定义***************************/
typedef struct  
{
	BYTE _buf[BLOCK_SIZE];											//发送的文件块内容
	int _len;														//分块的长度
	//long _offset;													//文件内容偏移值
	//DWORD _offSet;												//文件内容偏移值
	Size _offset;													//文件内容偏移值
}TransferData;

/**********************server给client发送的消息的数据部分的定义*************/
typedef union 
{
	FileInfo _fileInfo;												//文件信息，第一次传输所发送的内容
	TransferData _transferData;										//传输数据
}DataFromServer;

/**************************server给client发送的消息结构的定义***************/
typedef struct  
{
	MessageType _messageType;										//消息类型
	DataFromServer _data;											//数据部分
}MessageFromServer;

/**************************client给server发送的消息结构定义*****************/
typedef struct  
{
	MessageType _message;											//消息类型
	//long _offset;													//文件偏移值，为断点续传提供保证
	//DWORD _offSet;												//文件偏移值，为断点续传提供保证
	Size _offset;													//文件偏移值，为断点续传提供保证
}MessageFromClient;

/**************************server与client通信的消息结构的定义***************/
typedef union
{
	MessageFromClient _messageFromClient;
	MessageFromServer _messageFromServer;
}Message;
/**************************临界区定义***************************************/
static CRITICAL_SECTION g_csMessage;								//消息通信线程所用的临界区
static CRITICAL_SECTION g_csTransfer;								//文件传输线程所用的临界区


/***************************************************************************/
/******************************视图相关定义*********************************/
/***************************************************************************/

/**************************进度条相关属性定义*******************************/
#define MIN_RANGE													0
#define MAX_RANGE													100
#define STEP														1
/************************帮助文档的路径*************************************/
#define HELP_PATH													_T("//Help.chm")
/**************************发送给进度条的消息*******************************/
#define WM_PROGRESS													(WM_USER+100)
/************************最小化到托盘消息的定义*****************************/
#define WM_SHOWTASK													(WM_USER+101)

/**********************需要改变状态的控件最大数量定义************************/
#define MAX_CONTROL_NUM														10

/**********************server端需要改变状态的控件数量定义*******************/
#define SERVER_CTL_NUM												4
/***********************client端需要改变状态的控件数目***********************/
#define CLIENT_CTL_NUM												5
/***********************client端默认的文件保存目录***************************/
#define DEFAULT_FILE_PATH											_T("\\Temp")

/************************传输信息更新定时器号********************************/
#define TIMER_UPDATE												0
/************************默认的延时周期**************************************/
#define ELAPSE_DEFAULT												1000
/************************更新速度的时间间隔**********************************/
#define ELAPSE_UPDATE												1000